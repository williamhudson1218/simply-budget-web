{"ast":null,"code":"import _toConsumableArray from \"/Users/williamhudson/Documents/GitHub/simply-budget-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/williamhudson/Documents/GitHub/simply-budget-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { SET_BUDGETS, LIKE_SCREAM, UNLIKE_SCREAM, LOADING_DATA, DELETE_BUDGET, POST_SCREAM, SET_SCREAM, SUBMIT_COMMENT } from '../types';\nvar initialState = {\n  screams: [],\n  scream: {},\n  loading: false\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOADING_DATA:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case SET_BUDGETS:\n      return _objectSpread({}, state, {\n        budgets: action.payload,\n        loading: false\n      });\n\n    case SET_SCREAM:\n      return _objectSpread({}, state, {\n        scream: action.payload\n      });\n\n    case LIKE_SCREAM:\n    case UNLIKE_SCREAM:\n      var index = state.screams.findIndex(function (scream) {\n        return scream.screamId === action.payload.screamId;\n      });\n      state.screams[index] = action.payload;\n\n      if (state.scream.screamId === action.payload.screamId) {\n        state.scream = action.payload;\n      }\n\n      return _objectSpread({}, state);\n\n    case DELETE_BUDGET:\n      index = state.budget.findIndex(function (budget) {\n        return budget.budgetId === action.payload;\n      });\n      state.budgets.splice(index, 1);\n      return _objectSpread({}, state);\n\n    case POST_SCREAM:\n      return _objectSpread({}, state, {\n        screams: [action.payload].concat(_toConsumableArray(state.screams))\n      });\n\n    case SUBMIT_COMMENT:\n      return _objectSpread({}, state, {\n        scream: _objectSpread({}, state.scream, {\n          comments: [action.payload].concat(_toConsumableArray(state.scream.comments))\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/williamhudson/Documents/GitHub/simply-budget-web/src/redux/reducers/dataReducer.js"],"names":["SET_BUDGETS","LIKE_SCREAM","UNLIKE_SCREAM","LOADING_DATA","DELETE_BUDGET","POST_SCREAM","SET_SCREAM","SUBMIT_COMMENT","initialState","screams","scream","loading","state","action","type","budgets","payload","index","findIndex","screamId","budget","budgetId","splice","comments"],"mappings":";;AAAA,SACEA,WADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,YAJF,EAKEC,aALF,EAMEC,WANF,EAOEC,UAPF,EAQEC,cARF,QASO,UATP;AAWA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,eAAe,YAAuC;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,YAAL;AACE,+BACKS,KADL;AAEED,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKX,WAAL;AACE,+BACKY,KADL;AAEEG,QAAAA,OAAO,EAAEF,MAAM,CAACG,OAFlB;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKL,UAAL;AACE,+BACKM,KADL;AAEEF,QAAAA,MAAM,EAAEG,MAAM,CAACG;AAFjB;;AAIF,SAAKf,WAAL;AACA,SAAKC,aAAL;AACE,UAAIe,KAAK,GAAGL,KAAK,CAACH,OAAN,CAAcS,SAAd,CACV,UAACR,MAAD;AAAA,eAAYA,MAAM,CAACS,QAAP,KAAoBN,MAAM,CAACG,OAAP,CAAeG,QAA/C;AAAA,OADU,CAAZ;AAGAP,MAAAA,KAAK,CAACH,OAAN,CAAcQ,KAAd,IAAuBJ,MAAM,CAACG,OAA9B;;AACA,UAAIJ,KAAK,CAACF,MAAN,CAAaS,QAAb,KAA0BN,MAAM,CAACG,OAAP,CAAeG,QAA7C,EAAuD;AACrDP,QAAAA,KAAK,CAACF,MAAN,GAAeG,MAAM,CAACG,OAAtB;AACD;;AACD,+BACKJ,KADL;;AAGF,SAAKR,aAAL;AACEa,MAAAA,KAAK,GAAGL,KAAK,CAACQ,MAAN,CAAaF,SAAb,CACN,UAACE,MAAD;AAAA,eAAYA,MAAM,CAACC,QAAP,KAAoBR,MAAM,CAACG,OAAvC;AAAA,OADM,CAAR;AAGAJ,MAAAA,KAAK,CAACG,OAAN,CAAcO,MAAd,CAAqBL,KAArB,EAA4B,CAA5B;AACA,+BACKL,KADL;;AAGF,SAAKP,WAAL;AACE,+BACKO,KADL;AAEEH,QAAAA,OAAO,GAAGI,MAAM,CAACG,OAAV,4BAAsBJ,KAAK,CAACH,OAA5B;AAFT;;AAIF,SAAKF,cAAL;AACE,+BACKK,KADL;AAEEF,QAAAA,MAAM,oBACDE,KAAK,CAACF,MADL;AAEJa,UAAAA,QAAQ,GAAGV,MAAM,CAACG,OAAV,4BAAsBJ,KAAK,CAACF,MAAN,CAAaa,QAAnC;AAFJ;AAFR;;AAOF;AACE,aAAOX,KAAP;AAnDJ;AAqDD","sourcesContent":["import {\n  SET_BUDGETS,\n  LIKE_SCREAM,\n  UNLIKE_SCREAM,\n  LOADING_DATA,\n  DELETE_BUDGET,\n  POST_SCREAM,\n  SET_SCREAM,\n  SUBMIT_COMMENT\n} from '../types';\n\nconst initialState = {\n  screams: [],\n  scream: {},\n  loading: false\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case LOADING_DATA:\n      return {\n        ...state,\n        loading: true\n      };\n    case SET_BUDGETS:\n      return {\n        ...state,\n        budgets: action.payload,\n        loading: false\n      };\n    case SET_SCREAM:\n      return {\n        ...state,\n        scream: action.payload\n      };\n    case LIKE_SCREAM:\n    case UNLIKE_SCREAM:\n      let index = state.screams.findIndex(\n        (scream) => scream.screamId === action.payload.screamId\n      );\n      state.screams[index] = action.payload;\n      if (state.scream.screamId === action.payload.screamId) {\n        state.scream = action.payload;\n      }\n      return {\n        ...state\n      };\n    case DELETE_BUDGET:\n      index = state.budget.findIndex(\n        (budget) => budget.budgetId === action.payload\n      );\n      state.budgets.splice(index, 1);\n      return {\n        ...state\n      };\n    case POST_SCREAM:\n      return {\n        ...state,\n        screams: [action.payload, ...state.screams]\n      };\n    case SUBMIT_COMMENT:\n      return {\n        ...state,\n        scream: {\n          ...state.scream,\n          comments: [action.payload, ...state.scream.comments]\n        }\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}